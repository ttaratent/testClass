命令：
cd

ls -l 可以查看相关文件的权限信息
chmod 权限命令,调整文件拥有者、文件group以及others的读写以及执行权限
chmod 修改权限的方法有两种：
分别是符号法与数字法，数字法中r、w、x分别为4、2、1；

-rwxr-x-r-- chmod 754     
chmod u=rwx g=rx o=r

drwxr--r-- 
d表示该为directory

lrwxr--r-- l表示该为link

一个文件
以.开头表示该文件为隐藏文件


对文件来说，权限的性能为：

r：可读取此一文件的实际内容，如读取文件的文字内容等；

w：可以编辑、新增或者是修改该文件的内容（但不包含删除该文件）

x：该文件具有可以被系统执行的权限（至于能否被执行需要具体查看文件是否是具体的可执行文件）


对目录来说，权限的性能为：

r（read contenets in directory）

w（modify contents of directory）

x（access directory）


要开放目录给任何人浏览时，
应该至少要给予r及x的权限，但w权限不能够随意赋予
当文件所在目录对用户有r权限时，文件可以被ls命令检索出来，
但是若没有x权限，用户无法进入该目录，也就无法编辑或者执行该目录下的文件。


Linux文件名的限制为：单一文件或目录的最大容许文件名为255个英文字符或128个中文字符（相当于256个字节？）


FHS（Filesystem Hierarchy Standard（文件系统层次化标准））；

根据FHS的官方文件指出，他们主要目的是希望让使用者可以了解到已安装的软件通常放置于那个目录下
FHS订定出来的四种目录特色为：
shareable、unshareable、static、variable等四类；

FHS所定义的三层主目录为：/、/var、/usr三层而已
绝对路径文件名为从根目录/开始写起，否则都是相对目录

.表示当前目录  
..表示上层目录


chgrp 设置group

chown 设置拥有者



文件处理
ls -l 以竖向显示
ls -al 以竖向显示所有文件

ls -alF --full-time 将文件类型显示出来  并显示完整时间

ls -alF --color=never 显示不带颜色

ls -r 显示子目录以及其下的所有文件


cp 除了可以复制外，还可以创建链接文件，比对两个文件的新旧而予以更新，以及复制整个目录等等的功能

mv 移动目录与文件 也可以用来作更名 （其中存在另一个命令为rename 用于给多个文件进行重命名操作）

rm 移除


basename   用于取得文件名

dirname    用于取得目录名


cat  由第一行开始显示文件内容

tac  从最后一行开始显示，可以看出tac是cat倒着写

nl   显示的时候，顺便输出行号

more 一页一页的显示内容

less与more类似，但是比more更好的是，他可以往前翻页

head 只看头几行

tail 只看尾巴几行

od   以二进制的方式读取文件内容


date ; 
ls -l /etc/man_db.conf ; 
ls -l --time = atime /etc/man_db.conf ; 
\&gt ; 
lt -l --time=ctime /etc/man_db.conf


mtime  修改时间

ctime  status 状态、权限、属性变更时间

atime  访问时间


touch 可以创建空文件  /  修改 atime mtime

文件隐藏属性    
chattr 设置    
lsattr 查看

文件默认权限   
umask     
umask 0022  ->  共4组，第一位为特殊权限 且只记录去除的权限


umask  -S u=rwx g=rx o=rx
设置默认权限   
umask 02 =》  rw_rw_r__

使用者创建文件 ： 
(_rw_rw_rw_)
目录：(drwxdrwxdrwx)


root  默认umask 022

一般用户  umask 002

umask  设置可以参考/etc/.bashrc   ~/.bashrc


chattr 只能在Ext2/Ext3/Ext4 的Linux传统文件系统上完整生效

P322


有这些选项[+-=][ASacdisu]

xfs系统上有这些选项[Aadis]


lsattr [-adR] 文件/目录

a 将隐藏文件属性也秀出来

d 如果接的是目录

/etc/shadow  用于存放所有用户的密码文件

特殊权限

SUID    SGID   SBIT

SUID： set UID    user id

1、仅对二进制程序有效

2、执行者对于该程序需要具有x的可执行权限

3、本权限仅在执行该程序的过程中有效（run-time）

4、执行者将具有该程序的拥有者（owner）权限
-rws_ _ _ _ _ _


SGID：  
set GID   group id  _rwx__s__x
可作用于文件 或者 目录 上

1、文件
	对二进制程序有用
	程序执行者对于该程序来说，需具备x权限
	执行者在执行的过程中将会获得该程序群组的支持
	

2、目录
	使用者对于此目录具有r与x的权限时，该使用者能够进入此目录
	
使用者在此目录下的有效群组（effective group）将会变成该目录的群组
	
用途：若使用者在此目录下具有w的权限（可以新建文件）则使用者所创建的新文件，该新文件的群组与此目录的群组相同。

	

SBIT：   
sticky Bit   
目前只针对目录

可以参考/tmp

当使用者对于此目录具有w,x权限时
当使用者在该目录下创建文件或目录时，仅有自己与root才有权力删除该文件

设置权限时      
特殊权限   

4：SUID

2：SGID

1：SBIT


chmod 4777 filename      - >    _rwsrwxrwx


当出现S、T 代表具有空的SUID/SGID/SBIT权限   例如  _rwSrwSrwT    


chmod u=rwxs, go=x test

chmod g+s,o+t test



观察文件类型： file
可以查看文件的基本数据类型，有无使用动态函数库


which  （寻找可执行文件）

which [-a] command
默认找PATH内所规范的目录
bash内置指令：
可以用type

文件文件名的搜寻：


whereis （由一些特定的目录中寻找文件文件名）
主要针对  
/bin/sbin  下面的可执行文件
          
/usr/share/man 下面的man page文件
		  
以及几个比较特定的目录

whereis -l 可以确认查了多少目录

locate 
可搜寻部分文件名来检索
locate 
寻找的数据是由“已创建的数据库文件/var/lib/mlocate”提供


updatedb： 更新locate的数据库
根据/etc/updatedb.conf 
设置搜寻系统硬盘内的文件名，
并更新/var/lib/mlocate


locate：依据/var/lib/mlocate内的数据库记载，找出使用者输入的关键字文件名



find [PATH] [option][action]
	
			<-4->

					  -4 ------------------>

<------------------ +4

<___|___|____|_____|_____|_____|_____|_____|
	
7	6	 5	   4	 3	   2	 1     |

1）与时间相关：
	
-mtime n
	
-mtime +n
	
-mtime -n
	
-never file 具体文件名
	

2）与使用者或群组名称有关的参数
	
-uid n             /etc/passwd
	
-gid n             /etc/group
	
-user name
	
-group name
	
-nouser
	
-nogroup


3）与文件权限及名称有关的参数
	
-name
	
-size [+-]SIZE
	
-type TYPE 一段文件（f），设备文件(b,c)，目录（d）  链接（l） FIFO（p）socket（s）等 
	
-perm mode 文件权限为mode的
	
-perm mode 必须全部囊括mode权限
	
-perm /mode 包含任一mode权限



4）额外可进行的动作
	
-exec command：command为其他指令，-exec后面可接额外的指令来处理搜寻到的结果
	
-print 将结果打印到屏幕上  默认动作
		
			  <开始结束符>

find / -perm /7000 -exec ls -l {} \;

{}指代通过find查找到的内容




文件系统

*superblock：记录此filesystem的整体信息，包括inode/block的宗量，使用量，剩余量，以及文件系统的格式与相关信息等

*inode 记录文件的属性，一个文件占用一个inode，同时记录此文件的数据所在的block号码

*block 实际记录文件的内容，若文件太小时，会占用多个block


Ext2文件系统  属于  索引式文件系统  inode  / block

FAT     链式存储   下一个block是记录在上一个block中


Ext2  格式化时将分为多个区块群组
		
每个区块群组都有独立的inode/block/superblock：记录此filesystem的整体信息，包括inode/block的宗量，使用量，剩余量，以及文件系统的格式与相关信息等


|boot 	 |Block |Block |Block |Block
|sector  
|Group1|Group2|Group3|Group...

			
	
	|
		
	v
		
|Super|档案系统描述|区块对应表|inode |inode|Data
		
|Block|			   |		  |对应表|Table|Block
		

*data block （数据区块）

Block 大小     	|	1KB		|  2KB		|	4KB

最大单一文件限制|16GB		|256GB		|2TB

最大文件流总容量|2TB		|8TB		|16TB


*原则上，block大小与数量在格式化完就不能够再改变了（除非重新格式化）

*每个block内最多只能够数量一个文件的数据

*承上，如果文件大于block的大小，则一个文件会占用多个block数量

*承上，若文件小于block，则该block的剩余容量就不能够再被使用了（磁盘空间会浪费）





*Superblock 超级区块
是记录整个filesystem相关信息的地方，没有Superblock，就没有这个filesystem。

主要信息有
*block与indoe总量
*未使用与已使用的inode/block数量
*block与inode的大小（block为1,2,4K，inode为128Bytes或256Bytes）
*filesystem的挂载时间，最近一次写入数据时间，最近一次检验磁盘（fsck）的时间等文件系统的相关信息。
*一个vaild bit数值，若此文件系统已被挂载，则valid bit为0，若未被挂载，则valid bit为1

一般Superblock  大小为1024Bytes
一个文件系统应该仅有一个Superblock，所以除了第一个Superblock外的Superblock主要用于备份。

*Filesystem Description（文件系统描述说明）
描述每个block group开始与结束的block号码，以及说明（superblock，bitmap，inodemap，data block）
分别介于哪一个block号码之间。

*block bitmap  （区块对照表）
记录使用或未使用  block  
新增，删除时检索  对应文件 block

*inode   bitmap  （inode 对照表）
记录使用或未使用inode

*dumpe2fs   查询Ext家族superblock信息的指令
blkid   可以su出目前系统有被格式化的设备

P352

目录树：  目录    记录文件名
Inode  档名
number
53735697    anaconde.cfg
53745858    initial-setup-ks.cfg

ls  -i  观察文件所占用inode号码


*文件
当我们创建一个文件时：  ext2会分配一个inode与相对于该文件大小的block数量给该文件
例如：假设一个block为4KBytes，而要创建一个1000KBytes文件，
那么linux将分配一个inode与25个block来存储文件，但同时由于inode仅有12个直接指向，
因此还需要多一个block来作为区块号码记录。

*目录树读取
当文件太过分散（block）  可以将整个filesystem内的数据全部复制出来，奖盖filesystem重新格式化，在将数据给他复制回去。

partition  规划：


新建文件/目录
1、先确定对目录有无w  x 权限
2、根据inode bitmap  =》未使用inode，并将文件/属性写入
3、根据block bitmap  =》未使用block，并将实际的数据写入block且inode的block指向数据
4、将刚刚写入的inode与block数据同步更新inode bitmap与block bitmap，并更新superblock内容

数据存放区域：  inode table   data block

metadata（中介数据） superblock、block bitmap、inode bitmap

数据不一致状态， 由于突发原因等导致部分未同步可通过e2fsck进行强制数据一致性检查
日志式文件系统 （journaling filesystem）


Linux 文件系统的运行
非同步处理
当系统载入一个文件到内存后，如果该文件没有被变更过则在内存区段的文件数据会被设置为干净（clean）。
但如果内存中的文件数据被更改过了，此时该内存中的数据会被设置为脏的（Dirty）。此时，所有动作
都还在内存中执行，并未写入磁盘，系统不定时将Dirty数据写回磁盘，以保持一致，也可手动同步 sync

*系统会将常用的文件数据放置到内存的缓冲区以加速文件系统的读/写
*承上，因此Linux的实体内存最后都会被用光！这是正常情况！可加速系统性能
*可以手动使用sync来强迫内存中设置为Dirty的文件回写到磁盘中
*若正常关机时，关机指令会主动调用sync来将内存的数据会写磁盘内
*但若不正常关机（如跳电，死机或其他不明原因），由于数据尚未回写到磁盘内，因此重新开机后可能
会花很多时间在进行磁盘检验，设置可能导致文件系统的损毁（非磁盘损毁）

ls -d  查看目录


Linux 文件系统  与 VFS
*传统文件系统 ： ex2/minux/MS-DOS/FAT（用vfat模块）/iso9660（光盘）等等...
*日志式文件系统：  ex3/ex4/ReiserFS/Window/NTFS/IBM JFS/SGI's XFS/ZFS
*网络文件系统：  NFS/SMBFS

ls  -l /lib/modules/中  （uname -r）  /kernel/fs
查看Linux  支持的文件系统有哪些

系统目前已载入到内存中支持的文件系统
cat /proc/filesystems

*Linux  VFS  （Virtual Filesystem Switch）
读取FileSystem

XFS 文件系统简介：
Ext家族   预先分配inode/block/metadata等数据随着容量增大，格式化过慢

xfs文件系统在数据的分布上，主要规划为三个部分，一个数据区（data section）、
一个文件系统活动的登录区（log section）以及一个实时运行区（realtime section）

*数据区（data section）
基本上，数据区就跟我们之前谈到的ext家族一样，包括inode/data block/superblock等数据，都放置在这个区块。
这个数据区域ext家族的block group类似，也是分为多个储存区群组（allocation groups）来分别放置文件
系统所需要的数据。每个储存区群组都包含了
1）整个文件系统的superblock
2）剩余空间的管理机制
3）inode的分配与追踪
动态生成block  inode

*文件系统活动登录区（log section）
主要被用来记录文件系统的变化，其实有点像是日志区。
可指定

*实时运行区（realtime section）
当有文件要被创建时，xfs会在这个区段里面找一个到数个的extent区块，将文件放置在这个区块内，等到分配完毕后，
再写入到data section 的inode 与 block 去
这个extent 区块的大小得要在格式化的时候就先制定，最小值是4K最大可到1G。一般非磁盘阵列的磁盘默认为64K容量，
而具有类似磁盘阵列的stripe情况下，则建议extent设置为stripe一样的较佳，这个extent最好不要乱动，因为可能会
影响到实体磁盘的性能

*xfs文件系统的描述数据观察
xfs_info 挂载点&#124;设备文件名
df -T   /boot
xfs_info /dev/vda2

文件系统的简单操作
df ： 列出文件系统的整体磁盘使用量
du ： 评估文件系统的磁盘使用量（常用在推估目录所占容量）

df [-ahikHTm] [目录或文件名]
a  列出所有的文件系统，包括系统特有的/proc等文件系统
k  以KBytes容量显示各文件系统
m  以MBytes容量显示各文件系统
h  以人们较易阅读的GBytes、Mbytes、KBytes等格式自行显示
H  以M=1000K取代M=1024K的进位方式
T  连同该partition的filesystem名称（例如xfs）也列出
i  不用磁盘容量，而以inode的数量来显示

*FileSystem  代表该文件系统是在哪个partition，所以列出设备名称
*1K-blocks  说明下面的数字单位1KB  可用-h或者-m来改变容量
*Used    用掉的磁盘空间
*Available    剩下的磁盘空间大小
*Use%    磁盘利用率   （特别/var/spoo/mail 这个放置邮件的磁盘）
*Mounted on   磁盘挂载的目录所在  （挂载点）

/proc   是内存中的特殊目录   哦用于Linux系统所需载入的系统数据
/dev/shm  目录，其实是利用内存虚拟出来的磁盘空间，在下次开机时就消失了。

du ： [-ahskm]
-a  列出所有与目录容量，因为默认仅统计目录下面的文件而已
-h  以人们较易读的容量格式（G/M）显示
-s  列出总量而已，而不列出每个个别的目录
-S  不包括子目录下的总计，与-s有点差别
-k  以KBytes列出容量显示
-m  以MBytes列出容量显示

创建 实体链接  与  符号链接   ln
*实体链接   即共用同一个文件，只是文件名不同
但不能作用于目录，因为会造成结构过于复杂

ln /etc/crontab  创建实体链接

限制 ： 
不能跨filesystem
不能link目录
若一个文件被删掉，只有有其他实体链接，该文件不会实际删除

*Symbolic Link （符号链接，亦即是捷径）
通过创建一个文件，这个文件会读取link的文件

ln -s /etc/crontab crontab2
创建符号链接

ln [-sf] 来源文件 目标文件
-s  如果不加任何参数就进行链接，那就是hard link
至于 -s 就是symbolic link
-f 如果 目标文件 存在时，就主动的将目标文件直接移除后再创建

*关于目录的link数量
创建一个新目录名称为/tmp/testing时，
基本上会有 
/tmp/testing
/tmp/testing/.
/tmp/testing/..
当我们创建一个新的目录时，“新的目录的link数为2”，而上层目录的link数会增加1

磁盘的分区，格式化，检验与挂载
1、观察磁盘分区状态
*lsblk 列出系统上的所有磁盘列表
	（list block devices）
lsblk [-dfimpt] [device]
-d 仅列出磁盘本身，并不会列出该磁盘的分区数据
-f 同时列出该磁盘内的文件系统名称
-i 使用ASCII的线段输出，不要使用复杂的编码（在某些环境下很有用）
-m 同时输出该设备在/dev下面的权限数据（rwx的数据）
-P 列出该设备的完整文件名，而不是仅列出最后的名字而已
-t 列出该磁盘设备的详细数据，包括磁盘，伫列机制，预读写的数据量大小等

*NAME 就是设备的文件名  会省略/dev等前导目录
*MAJ：MIN  其实核心认识的设备都是通过这两个代码来熟悉的，分别是主要：次要设备代码
*RM 是否为可卸载设备（removable device） 如光盘、USB、磁盘等等
*SIZE  容量
*RO 是否为只读设备
*TYPE 是磁盘（disk）、分区（partition）还是只读存储器（rom）等输出
*MOUNTPOINT  挂载点


*blkid  列出设备的UUID等参数
UUID  （universally unique identifier）

*parted 列出磁盘的分区表类型与分区信息
（此处仅用于输出）
parted device-name print  


2、磁盘分区 ： gdisk （GPT）  /   fdisk（MBR）
*gdisk  设备名称
b back up GPT data to a file
c change a partition's name
d delete a partition
i show detailed information on a partition
l list known partition types
n add a new partition
o create a new empty GUID partition table (GPT)
p print the partition table
q quit without saving changes
r recovery and transformatino options (experts only)
s sort partitions
t change a partition's type code
v verify disk
w write table to disk and exit
x extra functionality (experts only)
? print the menu

*Number 分区编号，1号指的是/dev/vda 这样计算
*Start（Sector）每一个分区的开始扇区号码位置
*End（Sector） 每一个分区的结束扇区号码位置，与start之间可以算出分区的总容量
*Size  就是分区容量
*Code  在分区内的可能的文件系统类型  Linux 为 8300
swap 为 8200 不过这个项目只是提示而已，不见得真的代表此分区内的文件系统。
*NAME 文件系统的名称等

在新增分区时  Last Sector 时使用 +1G  定义大小系统自动计算
1、可以通过reboot 重启来应用分区表数据
2、partprobe  更新Linux 核心的分区表信息
partprobe -s   （显示讯息）

cat /proc/partiion 核心分区记录
千万不要处理正在使用的文件系统


*fdisk
a toggle a bootable flag
b edit bsd disklabel
c toggle the dos compatibility flag
d delete a partition
l list known partition types
m print this menu
n add a new partition
o create a new empty DOS partition table
P print the pratition table
q quit without saving changes
s create a new empty Sun disklabel
t change a partition's system id
u change display/entry units
v verify the partition table
w write table to disk and exit
x extra functionality (experts only)

磁盘格式化（创建文件系统）
mkfs
*XFS文件系统 mkfs.xfs
mkfs.xfs [-b bsize] [-d parms] [-i parms] [-b parms] [-L label] [-f] \ [-r parms] 设备名称
关于单位：下面只要谈到“数据”时，没有加单位则为Bytes值，可以用k，m，g，t，p（小写）等
来解释比较特殊的是s这个单位，它指的是sector的个数

-b  后面值的是block容量 可由512到64K ，不过最大容量限制为Linux的4K
-d  后面接的是重要的data section 的相关参数 主要的值有
agcount=数值：设置需要几个储存群组的意思（AG），通常与CPU有关
agsize=数值：每个AG设置为多少容量，通常agcount/agsize只选一个设置
file   格式化的设备是个文件而不是设备（虚拟磁盘……）
size=数值   data section的容量，亦即可以不讲全部设备容量用完
su=数值     当有RAID时，那个stripe数值的意思，与sw搭配使用
sw=数值     当有RAID时，用于储存数据的磁盘数量（需扣除备份碟与备用碟）
sunit=数值  与su相当，不过单位使用的是“几个secotr（512Bytes大小）”
swidth=数值 就是su*sw的值，但是以几个sector（512Bytes大小）来设置
如果设备内已经有文件系统（则需要使用这个-f来强制格式化才行）
与inode有较相关的设置，主要的设置值有
size  最小256Bytes 最大2K 一般256
internal=[0#124；1] log设备是否内置？默认1内置，若有外部设备，使用下面设置
legdev=device 设备后面接的那个设备上头的意思，需要internal=0才可
size=数值  指定登录区容量 通常512个block 2M以上
后面接这个文件系统的标头名称Label name
指定realtime section相关设置
extsize=数值：一般无须设置，但有RAID时，最好设置与swidth数值相同较佳！最小为4K，最大为1G
Ext4 文件系统  mkfs.ext4
mkfs.ext4 [-b size] [-L label]设备名称
-b  设置block的大小，有1K，2K，4K的容量
-L  后面接这个设置的标头名称

*其他文件系统  mkfs
mkfs [tab][tab] 查可支持哪些系统

文件系统检验
*xfs_repair 处理 XFS 文件系统
当有xfs文件系统错乱才需要使用这个指令。
xfs_repair [-fnd] 设备名称
-f 后面的设备其实是个文件而不是实体设备
-n 单纯检查并不修改文件系统的任何数据（检查而已）
-d 通常用在单人维护模式下面，针对根目录（/）进行检查与修复的动作   很危险，不要随便使用

xfs_repair 可以检查/修复文件系统，不过，因为修复文件系统是个很庞大的任务！因此，修复时该文件系统不能被挂载。
而对于根目录来说，可以通过-d这个选项，使系统强制检验该设备，检验完毕后就会自动重新开机。

*fsck.ext4处理EXT4文件系统
fsck是个综合指令，如果是针对ext4的话，建议直接使用fsck.ext4来检测比较妥当，那fsck.ext4的选项
有下面几个常见的项目
fsck.ext4 [-pf] [-b superblock] 设备名称
-p 当文件系统在修复时，若有需要回复 y 的动作时，自动回复 y 来继续进行修复动作
-f 强制检查！一般来说，如果fsck 没有发现任何unclean的旗标，不会主动进入细部检查的，
如果想要强制fsck进入细部检查，就得加上-f 旗标
-D 针对文件系统下的目录进行最优化配置
-b 后面接superblock的位置  一般来说这个选项用不到，但如果你的superblock因故损毁时，通过这个参数
即可利用文件系统内备份的superblock来尝试救援。一般来说，superblock备份在：1K block 放在8193,2K block放在16384,4K block放在32768

文件系统挂载与卸载
*单一文件系统不应该被重复挂载在不同的挂载点（目录）中
*单一目录不应该重复挂载多个文件系统
*要作为挂载点的目录，理论上应该都是空目录才是

mount -a 
mount [-l]
mount [-t 文件系统] LABEL = ''  挂载点
mount [-t 文件系统] UUID = '' 挂载点   （推荐）
mount [-t 文件系统] 设备文件名 挂载点
-a：依照配置文件[/etc/fstab]（../Text/index.html#fstab）的数据将所有未挂载的磁盘都挂载上来
-l：单纯的输入mount会显示目前挂载的信息，加上-l可增列Label名称！
-n：在默认情况下，系统会将实际挂载情况实时写入/etc/mtab中，以利其他程序的运行
-o：后面可以接一些挂载时额外加上的参数！比如账号，密码，读写权限等
async,sync
atime,noatime
ro,rw
auto,noauto
dev,nodev
suid,nosuid
exec,noexec
user,nouser
defaults
remount

哪些类型的filesystem 才需要进行上述的挂载测试，可参考：/etc/filesystems：系统指定的测试
挂载文件系统类型优先顺序 /proc/filesystems：Linux系统已经载入的文件系统类型

Linux支持的文件系统驱动程序写在如下目录中
/lib/module/中（uname -r） /kernel/fs/

挂载xfs/ext4/vfat  等文件系统
blkid  查看uuid
mount  挂载文件系统

通过 mount -o remount,rw,auto /    （重新挂载根目录  ？？？）

在不能使用symbolic link 时可以通过mount来实现
mount --bind /var /data/var   将/var目录暂挂到/data/var

umonut（将设备文件卸载）
umount [-fn] 设备文件名或挂载点
-f：强制卸载，可用在类似网络文件系统（NFS）无法读取到的情况下
-l：立刻卸载文件系统，比-f还强
-n：不更新/etc/mtab 情况下卸载

磁盘/文件系统参数修订
*mknod
通过major与minor数值来替代设备

mknod 设备文件名 [bcp] [Major] [Minor]
选项与参数：
设备种类：
b：设置设备名称成为一个周边储存设备文件，例如磁盘等
c：设置设备名称成为一个周边输入设备文件，例如鼠标/键盘等
p：设置设备名称成为一个FIFO文件
Major：主要设备代码
Minor：次要设备代码


xfs_admin  修改XFS文件系统的UUID与Label name
xfs_admin [-ln] [-L label] [-U uuid] 设备文件名
选项与参数：
-l：列出这个设备的label name
-u：列出这个设备的UUID
-L：设置这个设备的Label name
-U：设置这个设备的UUID

uuidgen  可以产生新的uuid


*tune2fs 修改ext4的label name 与 UUID
tune2fs [-l] [-L label] [-U uuid] 设备文件名
选项与参数
-l：类似dumpe2fs -h的功能  ~ 将superblock内的数据读出来
-L：修改LABEL name
-U：修改UUID

设置开机挂载
开机挂载  /etc/fstab  及 /etc/mtab
开机挂载的一些限制：
*根目录/是必须挂载的，而且一定要先于其他mount point被挂载进来
*其它mount point必须为已创建的目录，可任意指定，但一定要遵守必须的系统目录架构原则（FHS）
*所有mount point在同一时间之内，只能挂载一次
*所有partition在同一时间之内，只能挂载一次
*如若进行卸载，您必须先将工作目录移到mount point（及其子目录）之外

其实/etc/fstab （filesystem table）就是将我们利用mount指令进行挂载时，将所有的选项与参数写入
到这个文件中就是了。除此之外，/etc/fstab还加入了dump这个备份用指令的支持！与开机时是否进行文件
系统检验fsck等指令有关。这个文件的内容共有六个字段，这六个字段非常的重要！
-------------------------------------------------------------
[设备/UUID等] [挂载点] [文件系统] [文件系统参数] [dump] [fsck]
-------------------------------------------------------------
*第一栏：磁盘设备文件名/UUID/LABEL name
这个字段可以填写的数据主要有三个项目：
*文件系统或磁盘的设备文件名，如/dev/vda2等
*文件系统的UUID名称，如UUID=xxx
*文件系统的LABEL名称，例如LABEL=xxx

（LVM的文件名在你的系统中也算是独一无二的）
可以使用blkid或xfs_admin来查询UUID

*第二栏：挂载点（mount point）
就是挂载点，挂载点一定是目录

*第三栏：磁盘分区的文件系统
在手动挂载时可以让系统自动测试挂载，但在这个文件当中必须要手动写入文件系统才行！包括xfs，ext4，vfat，reiserfs，nfs等等

*第四栏：文件系统参数
记不得我们在mount这个指令中谈到很多特殊的文件系统参数？还有我们使用过的“-ocodepage=950”？这些特殊的参数就是写入在这个字段啦！
虽然之前在mount已经提过一次，这里我们利用表格的方式再汇整一下。
async/sync非同步/同步	设置磁盘是否以非同步方式运行！默认为async（性能较佳）
auto/noauto自动/非自动	当下达mount -a时，此文件系统是否会被主动测试挂载。默认为auto 
rw/ro可读写/只读	让该分区以可读写或者只读的形态挂载上来，如果你想分享的数据是不给使用者随意变更的，这里也能够设置为只读。则不论在此文件系统的文件是否设置w权限，都无法写入哦
exec/noexec可执行/不可执行	限制在此文件系统内是否可以进行“执行”的工作？如果是纯粹用来储存数据的目录，那么可以设置为noexec会比较安全。不过，这个参数也不能随便使用，因为你不知道该目录下是否默认会有可执行文件。举例来说，如果你将noexec设置在/var，当某些软件将一些执行文件放置于/var下时，那就会产生很大的问题！因此，建议这个noexec最多仅设置于你自订或分享的一般数据目录
user/nouser允许/不允许使用者挂载	是否允许使用者使用mount指令来挂载呢？一般而言，我们当然不希望一般身份的user能使用mount喽，因为太不安全了，因此这里应该要设置为nouser
suid/nosuid具有/不具有suid权限	该文件系统是否允许SUID的存在？如果不是可执行文件放置目录，也可以设置为nosuid来取消这个功能
defaults	同时具有rw，suid，dev，exec，auto，nouser，async等参数。基本上，默认情况使用defaults设置即可！

*第五栏：能否被dump备份指令作用
dump是一个用来做为备份的指令，不过现在有太多的备份方案了，所以这个项目可以不要理会！直接输入0就好了

*第六栏：是否以fsck检验扇区
早期开机的流程中，会有一段时间去检验本机的文件系统，看看文件系统是否完整（clean）。不过这个方式使用的主要是通过fsck去做的，我们现在用的xfs文件系统就没有办法适用，因为
xfs会自己进行检验，不需要额外进行这个动作！所以直接填0就好了。

/etc/fstab是开机时的配置文件，不过，实际filesystem的挂载是记录到/etc/mtab与/proc/mounts这两个文件当中的。每次我们在更动filesystem的挂载时，也会同时更动这两个文件。但是，万一发生你在
/etc/fstab输入的数据错误，导致无法顺利开机成功，而进入单人维护模式当中，那时候的/可是read only的状态，当然你就无法修改/etc/fstab，也无法更新/etc/mtab啰，
可以利用 mount -n -o remount,rw /


特殊设备loop挂载（镜像文件不烧录就挂载使用）
如果有光盘镜像文件，或者是使用文件作为磁盘的方式时，那就得要使用特别的方法来将他挂载起来，不需要烧录啦！！
*挂载光盘/DVD镜像文件
例：mount -o loop /tmp/CentOS.iso /data/centos_dvd

*创建大文件以制作loop设备文件

*创建大型文件
首先，通过Linux的dd程序，创建空的文件
dd if=/de/zero of=/srv/loopdev bs=1M count=512
# if 是input file，输入文字。那个/dev/zero是会一直输出0的设备！
# of 是output file ，将一堆零写入到后面的文件中
# bs 是每个block大小，就像文件系统那样的block意义
# count 则是总共几个bs的意思，所以bs*count 就是这个文件的容量

dd就好像在叠砖块一样，将512块，每块1M的砖块堆叠成为一个大文件（/srv/loopdev），最终就会出现一个512MB的文件。

*大型文件的格式化
默认xfs不能够格式化文件的，所以要格式化文件得要加入特别的参数才行
mkfs.xfs -f /srv/loopdev
blkid /drv/loopdev

*挂载
通过mount -o loop来进行
mount -o loop UUID="********" /mnt
df /mnt
通过这个简单的方法，感觉上就可以在原本的分区在不更动原有的环境下制作出你想要的分区就是了！
在Linux上使用xen这个软件，他就可以配合这种loop device的文件类型来进行根目录的挂载。





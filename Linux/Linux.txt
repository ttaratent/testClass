命令：
cd

ls -l 可以查看相关文件的权限信息
chmod 权限命令,调整文件拥有者、文件group以及others的读写以及执行权限
chmod 修改权限的方法有两种：
分别是符号法与数字法，数字法中r、w、x分别为4、2、1；

-rwxr-x-r-- chmod 754     
chmod u=rwx g=rx o=r

drwxr--r-- 
d表示该为directory

lrwxr--r-- l表示该为link

一个文件
以.开头表示该文件为隐藏文件


对文件来说，权限的性能为：

r：可读取此一文件的实际内容，如读取文件的文字内容等；

w：可以编辑、新增或者是修改该文件的内容（但不包含删除该文件）

x：该文件具有可以被系统执行的权限（至于能否被执行需要具体查看文件是否是具体的可执行文件）


对目录来说，权限的性能为：

r（read contenets in directory）

w（modify contents of directory）

x（access directory）


要开放目录给任何人浏览时，
应该至少要给予r及x的权限，但w权限不能够随意赋予
当文件所在目录对用户有r权限时，文件可以被ls命令检索出来，
但是若没有x权限，用户无法进入该目录，也就无法编辑或者执行该目录下的文件。


Linux文件名的限制为：单一文件或目录的最大容许文件名为255个英文字符或128个中文字符（相当于256个字节？）


FHS（Filesystem Hierarchy Standard（文件系统层次化标准））；

根据FHS的官方文件指出，他们主要目的是希望让使用者可以了解到已安装的软件通常放置于那个目录下
FHS订定出来的四种目录特色为：
shareable、unshareable、static、variable等四类；

FHS所定义的三层主目录为：/、/var、/usr三层而已
绝对路径文件名为从根目录/开始写起，否则都是相对目录

.表示当前目录  
..表示上层目录


chgrp 设置group

chown 设置拥有者



文件处理
ls -l 以竖向显示
ls -al 以竖向显示所有文件

ls -alF --full-time 将文件类型显示出来  并显示完整时间

ls -alF --color=never 显示不带颜色

ls -r 显示子目录以及其下的所有文件


cp 除了可以复制外，还可以创建链接文件，比对两个文件的新旧而予以更新，以及复制整个目录等等的功能

mv 移动目录与文件 也可以用来作更名 （其中存在另一个命令为rename 用于给多个文件进行重命名操作）

rm 移除


basename   用于取得文件名

dirname    用于取得目录名


cat  由第一行开始显示文件内容

tac  从最后一行开始显示，可以看出tac是cat倒着写

nl   显示的时候，顺便输出行号

more 一页一页的显示内容

less与more类似，但是比more更好的是，他可以往前翻页

head 只看头几行

tail 只看尾巴几行

od   以二进制的方式读取文件内容


date ; 
ls -l /etc/man_db.conf ; 
ls -l --time = atime /etc/man_db.conf ; 
\&gt ; 
lt -l --time=ctime /etc/man_db.conf


mtime  修改时间

ctime  status 状态、权限、属性变更时间

atime  访问时间


touch 可以创建空文件  /  修改 atime mtime

文件隐藏属性    
chattr 设置    
lsattr 查看

文件默认权限   
umask     
umask 0022  ->  共4组，第一位为特殊权限 且只记录去除的权限


umask  -S u=rwx g=rx o=rx
设置默认权限   
umask 02 =》  rw_rw_r__

使用者创建文件 ： 
(_rw_rw_rw_)
目录：(drwxdrwxdrwx)


root  默认umask 022

一般用户  umask 002

umask  设置可以参考/etc/.bashrc   ~/.bashrc


chattr 只能在Ext2/Ext3/Ext4 的Linux传统文件系统上完整生效

P322


有这些选项[+-=][ASacdisu]

xfs系统上有这些选项[Aadis]


lsattr [-adR] 文件/目录

a 将隐藏文件属性也秀出来

d 如果接的是目录

/etc/shadow  用于存放所有用户的密码文件

特殊权限

SUID    SGID   SBIT

SUID： set UID    user id

1、仅对二进制程序有效

2、执行者对于该程序需要具有x的可执行权限

3、本权限仅在执行该程序的过程中有效（run-time）

4、执行者将具有该程序的拥有者（owner）权限
-rws_ _ _ _ _ _


SGID：  
set GID   group id  _rwx__s__x
可作用于文件 或者 目录 上

1、文件
	对二进制程序有用
	程序执行者对于该程序来说，需具备x权限
	执行者在执行的过程中将会获得该程序群组的支持
	

2、目录
	使用者对于此目录具有r与x的权限时，该使用者能够进入此目录
	
使用者在此目录下的有效群组（effective group）将会变成该目录的群组
	
用途：若使用者在此目录下具有w的权限（可以新建文件）则使用者所创建的新文件，该新文件的群组与此目录的群组相同。

	

SBIT：   
sticky Bit   
目前只针对目录

可以参考/tmp

当使用者对于此目录具有w,x权限时
当使用者在该目录下创建文件或目录时，仅有自己与root才有权力删除该文件

设置权限时      
特殊权限   

4：SUID

2：SGID

1：SBIT


chmod 4777 filename      - >    _rwsrwxrwx


当出现S、T 代表具有空的SUID/SGID/SBIT权限   例如  _rwSrwSrwT    


chmod u=rwxs, go=x test

chmod g+s,o+t test



观察文件类型： file
可以查看文件的基本数据类型，有无使用动态函数库


which  （寻找可执行文件）

which [-a] command
默认找PATH内所规范的目录
bash内置指令：
可以用type

文件文件名的搜寻：


whereis （由一些特定的目录中寻找文件文件名）
主要针对  
/bin/sbin  下面的可执行文件
          
/usr/share/man 下面的man page文件
		  
以及几个比较特定的目录

whereis -l 可以确认查了多少目录

locate 
可搜寻部分文件名来检索
locate 
寻找的数据是由“已创建的数据库文件/var/lib/mlocate”提供


updatedb： 更新locate的数据库
根据/etc/updatedb.conf 
设置搜寻系统硬盘内的文件名，
并更新/var/lib/mlocate


locate：依据/var/lib/mlocate内的数据库记载，找出使用者输入的关键字文件名



find [PATH] [option][action]
	
			<-4->

					  -4 ------------------>

<------------------ +4

<___|___|____|_____|_____|_____|_____|_____|
	
7	6	 5	   4	 3	   2	 1     |

1）与时间相关：
	
-mtime n
	
-mtime +n
	
-mtime -n
	
-never file 具体文件名
	

2）与使用者或群组名称有关的参数
	
-uid n             /etc/passwd
	
-gid n             /etc/group
	
-user name
	
-group name
	
-nouser
	
-nogroup


3）与文件权限及名称有关的参数
	
-name
	
-size [+-]SIZE
	
-type TYPE 一段文件（f），设备文件(b,c)，目录（d）  链接（l） FIFO（p）socket（s）等 
	
-perm mode 文件权限为mode的
	
-perm mode 必须全部囊括mode权限
	
-perm /mode 包含任一mode权限



4）额外可进行的动作
	
-exec command：command为其他指令，-exec后面可接额外的指令来处理搜寻到的结果
	
-print 将结果打印到屏幕上  默认动作
		
			  <开始结束符>

find / -perm /7000 -exec ls -l {} \;

{}指代通过find查找到的内容




文件系统

*superblock：记录此filesystem的整体信息，包括inode/block的宗量，使用量，剩余量，以及文件系统的格式与相关信息等

*inode 记录文件的属性，一个文件占用一个inode，同时记录此文件的数据所在的block号码

*block 实际记录文件的内容，若文件太小时，会占用多个block


Ext2文件系统  属于  索引式文件系统  inode  / block

FAT     链式存储   下一个block是记录在上一个block中


Ext2  格式化时将分为多个区块群组
		
每个区块群组都有独立的inode/block/superblock：记录此filesystem的整体信息，包括inode/block的宗量，使用量，剩余量，以及文件系统的格式与相关信息等


|boot 	 |Block |Block |Block |Block
|sector  
|Group1|Group2|Group3|Group...

			
	
	|
		
	v
		
|Super|档案系统描述|区块对应表|inode |inode|Data
		
|Block|			   |		  |对应表|Table|Block
		

*data block （数据区块）

Block 大小     	|	1KB		|  2KB		|	4KB

最大单一文件限制|16GB		|256GB		|2TB

最大文件流总容量|2TB		|8TB		|16TB


*原则上，block大小与数量在格式化完就不能够再改变了（除非重新格式化）

*每个block内最多只能够数量一个文件的数据

*承上，如果文件大于block的大小，则一个文件会占用多个block数量

*承上，若文件小于block，则该block的剩余容量就不能够再被使用了（磁盘空间会浪费）





*Superblock 超级区块
是记录整个filesystem相关信息的地方，没有Superblock，就没有这个filesystem。

主要信息有
*block与indoe总量
*未使用与已使用的inode/block数量
*block与inode的大小（block为1,2,4K，inode为128Bytes或256Bytes）
*filesystem的挂载时间，最近一次写入数据时间，最近一次检验磁盘（fsck）的时间等文件系统的相关信息。
*一个vaild bit数值，若此文件系统已被挂载，则valid bit为0，若未被挂载，则valid bit为1

一般Superblock  大小为1024Bytes
一个文件系统应该仅有一个Superblock，所以除了第一个Superblock外的Superblock主要用于备份。

*Filesystem Description（文件系统描述说明）
描述每个block group开始与结束的block号码，以及说明（superblock，bitmap，inodemap，data block）
分别介于哪一个block号码之间。

*block bitmap  （区块对照表）
记录使用或未使用  block  
新增，删除时检索  对应文件 block

*inode   bitmap  （inode 对照表）
记录使用或未使用inode

*dumpe2fs   查询Ext家族superblock信息的指令
blkid   可以su出目前系统有被格式化的设备

P352

目录树：  目录    记录文件名
Inode  档名
number
53735697    anaconde.cfg
53745858    initial-setup-ks.cfg

ls  -i  观察文件所占用inode号码


*文件
当我们创建一个文件时：  ext2会分配一个inode与相对于该文件大小的block数量给该文件
例如：假设一个block为4KBytes，而要创建一个1000KBytes文件，
那么linux将分配一个inode与25个block来存储文件，但同时由于inode仅有12个直接指向，
因此还需要多一个block来作为区块号码记录。

*目录树读取
当文件太过分散（block）  可以将整个filesystem内的数据全部复制出来，奖盖filesystem重新格式化，在将数据给他复制回去。

partition  规划：


新建文件/目录
1、先确定对目录有无w  x 权限
2、根据inode bitmap  =》未使用inode，并将文件/属性写入
3、根据block bitmap  =》未使用block，并将实际的数据写入block且inode的block指向数据
4、将刚刚写入的inode与block数据同步更新inode bitmap与block bitmap，并更新superblock内容

数据存放区域：  inode table   data block

metadata（中介数据） superblock、block bitmap、inode bitmap

数据不一致状态， 由于突发原因等导致部分未同步可通过e2fsck进行强制数据一致性检查
日志式文件系统 （journaling filesystem）


Linux 文件系统的运行
非同步处理
当系统载入一个文件到内存后，如果该文件没有被变更过则在内存区段的文件数据会被设置为干净（clean）。
但如果内存中的文件数据被更改过了，此时该内存中的数据会被设置为脏的（Dirty）。此时，所有动作
都还在内存中执行，并未写入磁盘，系统不定时将Dirty数据写回磁盘，以保持一致，也可手动同步 sync

*系统会将常用的文件数据放置到内存的缓冲区以加速文件系统的读/写
*承上，因此Linux的实体内存最后都会被用光！这是正常情况！可加速系统性能
*可以手动使用sync来强迫内存中设置为Dirty的文件回写到磁盘中
*若正常关机时，关机指令会主动调用sync来将内存的数据会写磁盘内
*但若不正常关机（如跳电，死机或其他不明原因），由于数据尚未回写到磁盘内，因此重新开机后可能
会花很多时间在进行磁盘检验，设置可能导致文件系统的损毁（非磁盘损毁）

ls -d  查看目录


Linux 文件系统  与 VFS
*传统文件系统 ： ex2/minux/MS-DOS/FAT（用vfat模块）/iso9660（光盘）等等...
*日志式文件系统：  ex3/ex4/ReiserFS/Window/NTFS/IBM JFS/SGI's XFS/ZFS
*网络文件系统：  NFS/SMBFS

ls  -l /lib/modules/中  （uname -r）  /kernel/fs
查看Linux  支持的文件系统有哪些

系统目前已载入到内存中支持的文件系统
cat /proc/filesystems

*Linux  VFS  （Virtual Filesystem Switch）
读取FileSystem

XFS 文件系统简介：
Ext家族   预先分配inode/block/metadata等数据随着容量增大，格式化过慢

xfs文件系统在数据的分布上，主要规划为三个部分，一个数据区（data section）、
一个文件系统活动的登录区（log section）以及一个实时运行区（realtime section）

*数据区（data section）
基本上，数据区就跟我们之前谈到的ext家族一样，包括inode/data block/superblock等数据，都放置在这个区块。
这个数据区域ext家族的block group类似，也是分为多个储存区群组（allocation groups）来分别放置文件
系统所需要的数据。每个储存区群组都包含了
1）整个文件系统的superblock
2）剩余空间的管理机制
3）inode的分配与追踪
动态生成block  inode

*文件系统活动登录区（log section）
主要被用来记录文件系统的变化，其实有点像是日志区。
可指定

*实时运行区（realtime section）
当有文件要被创建时，xfs会在这个区段里面找一个到数个的extent区块，将文件放置在这个区块内，等到分配完毕后，
再写入到data section 的inode 与 block 去
这个extent 区块的大小得要在格式化的时候就先制定，最小值是4K最大可到1G。一般非磁盘阵列的磁盘默认为64K容量，
而具有类似磁盘阵列的stripe情况下，则建议extent设置为stripe一样的较佳，这个extent最好不要乱动，因为可能会
影响到实体磁盘的性能

*xfs文件系统的描述数据观察
xfs_info 挂载点&#124;设备文件名
df -T   /boot
xfs_info /dev/vda2

文件系统的简单操作
df ： 列出文件系统的整体磁盘使用量
du ： 评估文件系统的磁盘使用量（常用在推估目录所占容量）

df [-ahikHTm] [目录或文件名]
a  列出所有的文件系统，包括系统特有的/proc等文件系统
k  以KBytes容量显示各文件系统
m  以MBytes容量显示各文件系统
h  以人们较易阅读的GBytes、Mbytes、KBytes等格式自行显示
H  以M=1000K取代M=1024K的进位方式
T  连同该partition的filesystem名称（例如xfs）也列出
i  不用磁盘容量，而以inode的数量来显示

*FileSystem  代表该文件系统是在哪个partition，所以列出设备名称
*1K-blocks  说明下面的数字单位1KB  可用-h或者-m来改变容量
*Used    用掉的磁盘空间
*Available    剩下的磁盘空间大小
*Use%    磁盘利用率   （特别/var/spoo/mail 这个放置邮件的磁盘）
*Mounted on   磁盘挂载的目录所在  （挂载点）

/proc   是内存中的特殊目录   哦用于Linux系统所需载入的系统数据
/dev/shm  目录，其实是利用内存虚拟出来的磁盘空间，在下次开机时就消失了。

du ： [-ahskm]
-a  列出所有与目录容量，因为默认仅统计目录下面的文件而已
-h  以人们较易读的容量格式（G/M）显示
-s  列出总量而已，而不列出每个个别的目录
-S  不包括子目录下的总计，与-s有点差别
-k  以KBytes列出容量显示
-m  以MBytes列出容量显示
Python里，标识符由字母、数字、下划线组成
所有标识符可以包括英文、数字以及下划线（_），但不能以数字开头
Python中标识符是区分大小写的
以下划线开头的标识符是有特殊意义的。以单下划线开头_foo的代表不能直接访问的类属性，需通过类提供的接口进行访问，
不能用from xxx import * 而导入
以双下划线开头的__foo代表类的私有成员；以双下划线开头和结尾的__foo__代表Python里特殊方法专用的标识，如__init__（）代表类的构造函数
Python可以同一行显示多条语句，方法使用分号;分开

Python保留字符
and	exec	not	assert	finally	or	break	for	pass
class	from	print	continue	global	raise	def	if	return
del	import	try	elif	in	while	else	is	with
except	lambda	yield

行和缩进
最大的区别是，Python的代码块不使用大括号{}来控制类，函数以及其他逻辑判断。python
最具特色的就是用缩进来些模块
缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。
IndentationError: unindent does not match any outer indentation level错误表明，你使用的缩进方式不一致，有的是 tab 键缩进，有的是空格缩进，改为一致即可。

多行语句
Python语句中一般以新行作为语句的结束符。
但是我们可以使用斜杠（\）将一行的语句分为多行显示
total = item_one + \
	item_two + \
	item_three

语句中包含[],{}或()括号就不需要使用多行连接符：
days = ['Monday','Tuesday'
	]

Python引号
Python可以使用引号(')、双引号（"）、三引号（""或""""）来表示字符串，引号的开始于结束必须的系统类型的。
其中三引号可以由多行组成，编写多行文本的快捷语法，常用语文档字符串，在文件的特定地点，被当做注释

Python注释
python中单行注释采用#开头
python中多行注释使用三个单引号(''')或三个双引号(""")

Python空行
函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始
空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用
在于分隔两端不同功能或含义的代码，便于日后代码的维护或重构。
记住：空行也是程序代码的一部分。

等待用户输入
raw_input("按下enter键退出，其他任意键显示...\n")

Print输出
print默认输出是换行的，如果要实现不换行需要在变量末尾加上逗号,

多个语句构成代码组
缩进相同的一组语句构成一个代码块，我们称之为代码组。
像if、while、def和class这样的复合语句，首行以关键字开始，以冒号（:）结束，该行之后的一行或多行代码构成代码组。
我们将首行及后面的代码组称为一个子句(clause)

--------------------------------------------------------------
Python变量类型
变量存储在内存中的值，这就意味着在创建变量时会在内存中开辟一个空间
基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。
因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。

变量赋值
Python中的变量赋值不需要类型声明
每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。
每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建
等号（=）用来给变量赋值
等号（=）运算符左边是一个变量名，等号（=）运算符右边存储在变量中的值

多个变量赋值
Python允许你同时为多个变量赋值。
a=b=c=1
以上实例，创建一个整形对象，值为1，三个变量被分配到相同的内存空间上。
a,b,c=1,2,"John"
以上实例，两个整型对象1和2的分配给变量a和b，字符串对象“john”分配给变量c

标准数据类型
在内存中存储的数据可以有多种类型
有五个标准的数据类型：
Numbers（数字）
String（字符串）
List（列表）
Tuple（元组）
Dictionary（字典）

Python数字
数字数据类型用于存储数值
他们是不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象。
当你指定一个值时，Number对象就会被创建：
var1 = 1
var2 = 10
也可以用del语句删除一些对象的引用
del语句的语法是：
del var1[,var2[,var3[....,varN]]]]
可以通过使用del语句删除单个或多个对象的引用。例如：
del var
del var_a, var_b
Python支持四种不同的数字类型：
int（有符号整型）
long（长整型[也可以代表八进制和十六进制]）
float（浮点型）
complex（复数）

长整型也可以使用小写l，但是还是建议使用大写L，避免与数字1混淆。Python使用L来显示长整型
Python还支持复数，复数由实数部分和虚数部分构成，可以用a+bj，或者complex(a,b)表示，复数的实部a
和虚部b都是浮点型


str = 'Hello World!'
pring str[2:]
用于输出从第二个字符起的字符串
print str * 2   # 输出字符串两次
print str + "TEST"   #输出链接的字符串


Python列表 
List（列表）是Python中使用最频繁的数据类型
列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至包含列表（即嵌套）
列表用[]标识，是python最通用的复合数据类型
列表中值得切割也可以用到变量[头下标:尾下标],就可以截取相应的列表，从左到右索引默认0开始，从右到左索引默认-1开始，下标可以为空表示取到头或尾。
加号+是列表链接运算符，星号*是重复操作。
list = ['runoob', 786, 2.23, 'john', 70.2]
tinylist = [123, 'john']

pring list   # 输出完整列表
print list[0]  # 输出列表的第一个元素
print list[1:3]  # 输出第二个至第三个元素
print list[2:]   # 输出从第三个开始至列表末尾的所有元素
print tinylist * 2  # 输出列表两次
print list + tinylist  # 打印组合的列表

Python元组
元组是另一个数据类型，类似于List(列表)
元组用"()"标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表
tuple = ('runoob', 786, 2.23, 'john', 70.2)
tinytuple = (123, 'john')

print tuple   # 输出完整元组
print tuple[0] # 输出元组的第一个元素
print tuple[1:3]  # 输出第二个至第三个的元素
print tuple[2:]  # 输出从第三个开始至列表末尾的所有元素
print tinytuple * 2 # 输出元组两次
print tuple + tinytuple # 打印组合的元组


Python字典
字典（dictionary）是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。
两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。
字典用"{}"。字典由索引（key）和它对应的值value组成
dict = {}
dict['one'] = "This is one"
dict[2] = "This is two"
tinydict = {'name':'john', 'code':6734, 'dept':'sales'}

print dict['one']  # 输出键为'one'的值
print dict[2]      # 输出键为2的值
print tinydict     # 输出完整的字典
print tinydict.keys()  # 输出所有键
print tinydict.values() # 输出所有值


Python数据类型转换
有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可
以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。
函数       描述
int(x [,base])

将x转换为一个整数

long(x [,base] )

将x转换为一个长整数

float(x)

将x转换到一个浮点数

complex(real [,imag])

创建一个复数

str(x)

将对象 x 转换为字符串

repr(x)

将对象 x 转换为表达式字符串

eval(str)

用来计算在字符串中的有效Python表达式,并返回一个对象

tuple(s)

将序列 s 转换为一个元组

list(s)

将序列 s 转换为一个列表

set(s)

转换为可变集合

dict(d)

创建一个字典。d 必须是一个序列 (key,value)元组。

frozenset(s)

转换为不可变集合

chr(x)

将一个整数转换为一个字符

unichr(x)

将一个整数转换为Unicode字符

ord(x)

将一个字符转换为它的整数值

hex(x)

将一个整数转换为一个十六进制字符串

oct(x)

将一个整数转换为一个八进制字符串


Python运算符
4+5=9   例子中：4和5被称为操作数，“+”称为运算符。
Python语言支持以下类型的运算符：
*算数运算符
*比较（关系）运算符
*赋值运算符
*逻辑运算符
*位运算符
*成员运算符
*身份运算符
*运算符优先级


Python算术运算符
以下假设变量：a=10， b=20；
运算符            描述              实例
+	加 - 两个对象相加
-	减 - 得到负数或是一个数值减去另一个数
*	乘 - 两个数相乘或是返回一个被重复若干次的字符串
/	除 - x除以y
%	取模 - 返回除法的余数
**	幂 - 返回x的y次幂
//	取整数 - 返回商的整数部分
注意：Python2.x里，整数除整数，只能得出整数。如果要得到小数部分，把其中一个数改成浮点数即可。


Python比较运算符
运算符		描述
==		等于 - 比较对象是否相等
!=		不等于 - 比较两个对象是否不相等
<>		不等于 - 比较两个对象是否不相等
>		大于 - 返回x是否大于y
<		小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价
>=		大于等于 - 返回x是否大于等于y
<=		小于等于 - 返回x是否小于等于y


Python赋值运算符
运算符		描述
=		简单的赋值运算符
+=		加法赋值运算符
-=		减法赋值运算符
*=		乘法赋值运算符
/=		除法赋值运算符
%=		取模赋值运算符
**=		幂赋值运算符
//=		取整除赋值运算符


Python位运算符
按位运算符是把数字看做二进制来进行计算的。Python中的按位云算法则如下：
运算符			描述
&		按位与运算符：参与运算的两个值，如果两个相应位都为1，则该位的结果为1，否则为0
|		按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1.
^		按位异或运算符：当两个的二进位相异时，结果为1
~		按位取反运算符：对数据的每个二进制位取反，即把1变为0，把0变为1.~x类似于-x-1
<<		左移动运算符：运算数的各二进位全部左移若干位，由<<右边的数字指定了移动的位数，高位丢弃，低位补0
>>		右移动运算符：把">>"左边的运算数的各二进位全部右移若干位，>>右边的数字指定了移动的位数


Python逻辑运算符
Python语言支持逻辑运算符
运算符		逻辑表达式		描述
and		x and y		布尔“与” - 如果x为False，x and y 返回False，否则它返回y的计算值
or		x or y		布尔“或” - 如果x是非0，它返回x的值，否则它返回y的计算值
not		not x		布尔“非” - 如果x为True，返回False。如果x为False，它返回True


Python成员运算符
除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。
in			如果在指定的序列中找到值返回True，否则返回False
not in		如果在指定的序列中没有找到值返回True，否则返回False


Python身份运算符
身份运算符用于比较两个对象的存储单元
运算符			描述
is			is是判断两个标识符是不是引用自一个对象，类似id(x) == id(y)
is not		is not是判断两个标识符是不是引用自不同对象，类似id(x) != id(y)


Python运算符优先级
以下表格列出了从最高到最低优先级的所有运算符：
运算符	描述
**	指数 (最高优先级)
~ + -	按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)
* / % //	乘，除，取模和取整除
+ -	加法减法
>> <<	右移，左移运算符
&	位 'AND'
^ |	位运算符
<= < > >=	比较运算符
<> == !=	等于运算符
= %= /= //= -= += *= **=	赋值运算符
is is not	身份运算符
in not in	成员运算符
not or and	逻辑运算符


Python条件语句
Python条件语句是通过一条或多条语句的执行结果（True或者False）来决定执行的代码块。
Python程序语言指定任何非0和非空（null）值为true，0或者null为false
Python编程中if语句用于控制程序的执行，基本形式为：
if 判断条件:
	执行语句...
else:
	执行语句...
其中“判断条件”成立时（非零），则执行后面的语句，而执行内容可以多行，以缩进来区分表示同一范围。
else为可选语句，当需要在条件不成立时执行内容则可以执行相关语句。
当判断条件为多个值时，可以使用以下形式：
if 判断条件1:
	执行语句1...
elif 判断条件2:
	执行语句2...
elif 判断条件3:
	执行语句3...
else:
	执行语句4...
由于python并不支持switch语句，所以多个条件判断，只能用elif来实现，如果判断需要多个条件需同时判断时，可以使用or（或），表示两个条件有一个成立时判断条件成功；使用and（与）时，表示只有两个条件同时成立的情况下，判断条件才成功。
当if有多个条件时可使用括号来区分判断的先后顺序，括号中的判断优先执行，此外and和or的优先级低于>(大于)，<(小于)等判断符号，即大于和小于在没有括号的情况下会比与或要优先判断。

简单的语句组： 你也可以在同一行的位置上使用if条件判断语句。
if 判断条件: 执行语句（只能一个有效语句）


Python循环语句
Python提供了for循环和while循环（在Python中没有do、while循环）：
循环类型			描述
while循环			在给定的判断条件为true时执行循环体，否则退出循环体
for循环				重复执行语句
嵌套循环			你可以在while循环体中嵌套for循环

循环控制语句
循环控制语句可以更改语句执行的顺序。Python支持以下循环控制语句：
控制语句				描述
break语句				在语句块执行过程中终止循环，并且跳出整个循环
continue语句			在语句块执行过程中终止当前循环，跳出该次循环，执行下一次循环
pass语句				pass是空语句，是为了保持程序结构的完整性

while循环语句：
Python编程中while语句用于循环执行程序，即在某条件下，循环执行某段程序，以处理需要重复处理的相同任务。
其基本形式为：
while 判断条件:
	执行语句...
执行语句可以是单个语句或语句块。判断条件可以使任何表达式，任何非零、或非空(null)的值均为true。
当判断条件假false时，循环结束。
while语句时还有另外两个重要的命令continue，break来跳过循环，continue用于跳过该次循环，break则是用于退出循环，此外“判断条件”还可以是个常值，表示循环必定成立

无限循环
如果条件判断语句永远为true，循环将会无限的执行下去。
注意：以上的无限循环你可以使用CTRL+C来中断循环

循环使用else语句
在python中，while...else在循环条件为false时执行else语句块

简单语句组
类似if语句的语法，如果你的while循环体中只有一条语句，你可以将该语句与while写在同一行中。
注意：以上的无限循环你可以使用CTRL+C来中断循环。

Python for循环语句
Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串
语法：
for循环的语法格式如下：
for iterating_var in sequence:
	statements(s)

通过序列索引迭代
另外一种执行循环的遍历方式是通过索引：
fruits = ['banana','apple','mango']
for index in range(len(fruits)):
	print '当前水果:', fruit[index]
以上实例我们使用了内置函数len()和range(),函数len()返回列表的长度，即元素的个数。range返回一个序列的数

循环使用else语句
在python中，for...else表示这样的意思，for中的语句和普通的没有区别，else中的语句会在循环正常执行完(即for不是通过


Python循环嵌套
Python语言允许在一个循环体里面嵌入另一个循环
Python for循环嵌套语法：
for iterating_var in sequence:
	for iterating_var in sequence:
		statements(s)
	statements(s)

Python while 循环嵌套语法：
while expression:
	while expression:
		statements(s)
	statements(s)

你可以在循环体内嵌入其他的循环体，如在while循环中可以嵌入for循环，反之，你可以在for循环中嵌入while循环。

Python pass是空语句，是为了保持程序结构的完整性。
pass不做任何事情，一般用做占位语句。


Python Number（数字）
Python Number 数据类型用于存储数值
数据类型是不允许改变的，这就意味着如果改变Number数据类型的值，将重新分配内存空间。
可以使用del语句删除一些Number对象引用，
del语句的语法是:
del var1[,var2[,var3[....,varN]]]
您可以通过使用del语句删除单个或多个对象。

Python 支持四种不同的数据类型：
*整型（int）- 通常被称为是整型或整数，是正或负整数，不带小数点。
*长整型（long integers）- 无限大小的整数，整数最后是一个大写或小写的L。
*浮点型（floating point real values）- 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2=2.5*10^2 = 250)
*复数（complex numbers）- 复数由实数部分和虚数部分构成，可以用a+bj或者complex(a,b)表示，复数的实部a和虚部b都是浮点型。


长整型也可以会用小写“L”，但是还是建议您会用大写"L”，避免与数字“1”混淆。Python使用“L”来显示长整型。

Python还支持复数，复数由实数部分和虚数部分构成，可以用a+bj或者complex(a,b)表示，复数的实部a和虚部b都是浮点型。

Python Number类型转换
int(x [,base ])         将x转换为一个整数  
long(x [,base ])        将x转换为一个长整数  
float(x )               将x转换到一个浮点数  
complex(real [,imag ])  创建一个复数  
str(x )                 将对象 x 转换为字符串  
repr(x )                将对象 x 转换为表达式字符串  
eval(str )              用来计算在字符串中的有效Python表达式,并返回一个对象  
tuple(s )               将序列 s 转换为一个元组  
list(s )                将序列 s 转换为一个列表  
chr(x )                 将一个整数转换为一个字符  
unichr(x )              将一个整数转换为Unicode字符  
ord(x )                 将一个字符转换为它的整数值  
hex(x )                 将一个整数转换为一个十六进制字符串  
oct(x )                 将一个整数转换为一个八进制字符串  

Python math模块、cmath模块
Python中数学运算常用的函数基本都在math模块、cmath模块中。
Python math模块提供了许多对浮点数的数字运算函数
Python cmath模块包含了一些用于复数运算的函数
cmath模块的函数跟math模块函数基本一致，区别是cmath模块运算的是复数，math模块运算的是数学运算
要使用math或cmath函数必须先导入：
import math

查看math 查看包中的内容
import math
dir(math)


Python数学函数
abs(x) 返回数字的绝对值
ceil(x) 返回数字的上入证书，向上取整
cmp(x,y) 如果x<y返回-1，如果x==y返回0，如果x>y返回1
exp(x) 返回e的x次幂
fabs(x) float的绝对值
floor(x) 返回数字的向下取整
log(x) 返回对数 例math.log(math.e) 返回1.0 math.log(100,10) 返回2.0
log10(x) 返回以10为基数的x的对数
max(x1,x2...) 返回给定参数的最大值，参数可以为序列
min(x1,x2...) 最小值
modf(x) 返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示
pow(x,y) x**y运算后的值
round(x[,n]) 返回浮点数x的四舍五入值
sqrt(x) 返回数字x的平方根


Python随机数函数
choice(seq) 从序列的元素中随机挑选一个元素，比如random.choice(range(10)),从0到9随机挑选一个整数
randrange([start]stop[,step]) 从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为1
random() 随机生成一个实数，它在[0,1)范围内
seed([x]) 改变随机数生成器的种子seed。如果不了解原理，不必特别去设定seed，Python会帮你选择seed
shuffle(lst) 将序列的所有元素随机排序
uniform(x,y) 随机生成下一个实数，它在[x,y]范围内

Python三角函数
acos(x) 返回x的反余弦弧度值
asin(x) 返回x的反正弦弧度值
atan(x) 返回x的反正切弧度值
atan2(y,x) 返回给定的X及Y坐标值的反正切值
cos(x) 返回x的弧度的余弦值
hypot(x,y) 返回欧几里德范数sqrt(x*x+y*y)
sin(x) 返回的x弧度的正弦值
tan(x) 返回x弧度的正切值
degrees(x) 将弧度转换为角度，如degrees(math.pi/2) 返回90.0
radians(x) 将角度转换为弧度

Python数学常量
pi 数学常量pi(圆周率)
e 数学常量e，e即自然常数

Python 字符串
var1 = "Hello World!"
var2 = "Python Runoob"
子字符串： var1[1:5]

可以对已存在的字符串进行修改，并赋值给另一个变量
var1[:6] + 'Runoob!'

Python转义字符
\(在行尾时)  续行符
\\           反斜杠符号
\'           单引号
\"           双引号
\a           响铃
\b           退格
\e           转义
\000         空
\n           换行
\v           纵向制表符
\t           横向制表符
\r           回车
\f           换页
\oyy         八进制数，yy代表的字符，例如:\o12代表换行
\xyy         十六进制数，yy代表的字符，例如:\x0a代表换行
\other       其它的字符以普通格式输出


Python字符串运算符
+       字符串连接
*       重复输出字符串
[]      通过索引获取字符串中字符
[:]     截取字符串中的一部分
in      成员运算符-如果字符串中包含给定的字符返回True
not in  成员运算符-如果字符串中不包含给定的字符返回True
r/R     原始字符串-原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符，原始字符串除在字符串的第一个引号前加上字母"r"(可以大小写)以外，与普通字符串有着几乎完全相同的语法
%       格式字符串

Python字符串格式化
Python支持格式化字符串的输出。与C中sprintf函数一样的语法
符号          描述
%c            格式化字符及其ASCII码
%s            格式化字符串
%d            格式化整数
%u            格式化无符号整型
%o            格式化无符号八进制数
%x            格式化无符号十六进制数
%X            格式化无符号十六进制数(大写)
%f            格式化浮点数字，可指定小数点后的精度
%e            用科学计数法格式化浮点数
%E            作用同%e，用科学计数法格式化浮点数
%g            %f和%e的简写
%G            %f和%E的简写
%p            用十六进制数格式化变量的地址

格式化操作符辅助指令
符号              功能
*                 定义宽度或者小数点精度
-                 用做左对齐
+                 在正数前面显示加号（+）
<sp>              在正数前面显示空格
#                 在八进制数前面显示零（'0'），在十六进制前面显示'0x'或者'0X'（取决于用的是'x'还是'X'）
0                 显示的数字前面填充'0'而不是默认的空格
%                 '%%'输出一个单一的'%'
(var)             映射变量（字典参数）
m.n.              m是显示的最小总宽度，n是小数点后的位数(如果可用的话)

Python2.6开始，新增了一种格式化字符串的函数str.format()，它增强了字符串格式化的功能

Python三引号(triple quotes)
用于在python中跨多行进行字符串操作

Unicode字符串
u'Hello World !'
定义时在Unicode字符串前加上一个u，加入特殊字符，可以使用Python的Unicode-Escape编码，例：'\u0020'

Python的字符串内建函数
方法                                    描述
string.capitalize()                     把字符串的第一个字符大写
string.center(width)                    返回一个原字符串居中，并使用空格填充至长度width的新字符串
string.count(str,beg=0,end=len(string)) 返回str在string里面出现的次数，如果beg或者end指定则返回指定范围内str出现的次数
string.decode(encoding='UTF-8',errors='strict') 以encoding指定的编码格式解码string，如果出错默认报一个ValueError的异常，除非errors指定的是'ignore'或者'replace'
string.encode(encoding='UTF-8',errors='strict') 以encoding指定的编码格式编码string，如果出错默认报一个ValueError的异常，除非errors指定的是'ignore'或者'replace'
string.endswith(obj,beg=0,end=len(string)) 检查字符串是否以obj结束，如果beg或者end指定则检查指定的范围内是否以obj结束，如果是，返回True，否则返回False
string.expandtabs(tabsize=8)            把字符串string中的tab符号转为空格，tab符号默认的空格数是8
string.find(str,beg=0,end=len(string))  检测str是否包含在string中，如果beg和end指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1
string.format()                         格式化字符串
string.index(str,beg=0,end=len(string)) 跟find()方法一样，只不过如果str不在string中会报一个异常
string.isalnum()                        如果string至少有一个字符并且所有字符都是字母或数字则返回True，否则返回False
string.isalpha()                        如果string至少有一个字符并且所有字符都是字母则返回True，否则返回False
string.isdecimal()                      如果string只包含十进制数字则返回True否者返回False



